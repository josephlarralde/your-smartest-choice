'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _client = require('soundworks/client');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var audioContext = _client.audio.audioContext;

function startSource(time, buffer, offset, output) {
  var src = audioContext.createBufferSource();

  src.connect(output);
  src.buffer = buffer;
  src.start(time, offset);

  return src;
}

function stopSource(src, time) {
  src.stop(time);
}

function setSourceLoop(src, start, end) {
  src.loop = true;
  src.loopStart = start;
  src.loopEnd = end;
}

function resetSourceLoop(src) {
  src.loop = false;
}

function startEnvelope(time, attack, output) {
  var env = audioContext.createGain();
  env.connect(output);
  env.gain.value = 0;
  env.gain.setValueAtTime(0, time);
  env.gain.linearRampToValueAtTime(1, time + attack);

  return env;
}

// the synth make sure that stop is never fired before the attack is ended
function stopEnvelope(env, time, release) {
  var cancelScheduledValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var endTime = time + release;

  if (cancelScheduledValues) {
    env.gain.cancelScheduledValues(time);
    env.gain.setValueAtTime(env.gain.value, time);
  } else {
    env.gain.setValueAtTime(1, time);
  }

  env.gain.linearRampToValueAtTime(0, endTime);

  return endTime;
}

function sanitize(value, defaultValue) {
  return value === undefined ? defaultValue : value;
}

var min = Math.min;
var max = Math.max;
var random = Math.random;

var SampleSynth = function () {
  function SampleSynth(options) {
    (0, _classCallCheck3.default)(this, SampleSynth);

    this.buffer = options.buffer;

    if (!this.buffer) throw new Error('Undefined buffer');

    this.sustained = sanitize(options.sustained, false);

    // offset / attack / release
    this.offset = sanitize(options.offset, 0);
    this.offsetVar = sanitize(options.offsetVar, 0);
    this.attack = sanitize(options.attack, 0);
    this.release = sanitize(options.release, 0);

    // loop parameters
    this.loopStart = sanitize(options.loopStart, 0);
    this.loopEnd = sanitize(options.loopEnd, this.buffer.duration);
    this.loopStartVar = sanitize(options.loopStartVar, 0);
    this.loopEndVar = sanitize(options.loopEndVar, 0);

    this._output = audioContext.createGain();
    this._output.gain.value = sanitize(options.gain, 1);
    this._output.gain.setValueAtTime(sanitize(options.gain, 1), audioContext.currentTime);

    this._src = null;
    this._env = null;
    this._startTime = null;
    this._position = null;
  }

  (0, _createClass3.default)(SampleSynth, [{
    key: 'connect',
    value: function connect(node) {
      this._output.connect(node);
    }
  }, {
    key: 'start',
    value: function start(time) {
      if (this._src !== null) this.stop(time);

      var buffer = this.buffer;
      var duration = buffer.duration;
      var env = null;
      var src = null;

      var offset = this.offset + this.offsetVar * random() - this.offsetVar * 0.5;
      offset = max(0, min(duration, offset));

      if (!this.sustained) {
        // make sure the release is not triggered before the attack ends
        var attack = min(duration - offset, this.attack);
        var releasePosition = max(offset + attack, duration - this.release);
        var release = duration - releasePosition;
        // console.log('attack:', attack, 'release:', release, 'releasePosition:', releasePosition);
        // attack
        env = startEnvelope(time, attack, this._output);
        src = startSource(time, buffer, offset, env);
        // release
        var endTime = stopEnvelope(env, time + releasePosition, release);
        stopSource(src, endTime);
      } else {
        var start = this.loopStart + this.loopStartVar * random() - this.loopStartVar * 0.5;
        var end = this.loopEnd + this.loopEndVar * random() - this.loopEndVar * 0.5;
        var clampedStart = max(0, start);
        var clampedEnd = min(duration, end);
        var lower = min(clampedStart, clampedEnd);
        var upper = max(clampedStart, clampedEnd);
        // offset cannot be larger than loopStop (is done natively by webAudio but
        // we need to track the right value to properly compute the release)
        offset = min(offset, upper);
        // console.log('loopStart:', lower, 'loopEnd:', upper);
        env = startEnvelope(time, this.attack, this._output);
        src = startSource(time, buffer, offset, env);
        setSourceLoop(src, lower, upper);

        this._src = src;
        this._env = env;
      }

      this._startTime = time;
      this._position = offset;
    }
  }, {
    key: 'stop',
    value: function stop(time) {
      if (!this.sustained || !this._src) return;

      var src = this._src;
      var env = this._env;
      var duration = this.buffer.duration;
      var loopStart = src.loopStart;
      var loopEnd = src.loopEnd === 0 ? duration : src.loopEnd;

      var dt = time - this._startTime;
      // current position in buffer according to the initial offset
      var position = this._position + dt;
      // process the position according to the loop boundaries
      if (position > loopStart) position = loopStart + (position - loopStart) % (loopEnd - loopStart);

      // if attack is not finished yet, we must cancel the scheduled values
      var cancelScheduledValues = dt < this.attack ? true : false;
      var release = min(duration - position, this.release);

      // stop source
      resetSourceLoop(src);
      var endTime = stopEnvelope(env, time, release, cancelScheduledValues);
      stopSource(src, endTime);

      this._src = null;
      this._env = null;
    }
  }, {
    key: 'gain',
    set: function set(value) {
      this._output.gain.setValueAtTime(value, audioContext.currentTime);
    }
  }]);
  return SampleSynth;
}();

exports.default = SampleSynth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,